#+TITLE: Chapter 9 problems

* ch9-problems
** 9-1
   1. Use best asymptotic worst-case \(O(n\lg n)\) running time sorting 
      algorithm (heapsort, merge-sort) to sort the numbers, then list the
      i largest number, the total running time is asymptotically same as 
      the sorting algorithm we are using.
   2. Build a max-priority queue from the numbers using BUILD-MAX-HEAP 
      in \(\Theta(n)\) running time, then call EXTRACT-MAX i times, which each 
      EXTRACT-MAX has \(O(\lg n)\) running time in worst case, the total 
      worst-case running time is \(O(n + i\lg n)\).
   3. Use an order-statistic algorithm to find the ith largest number in 
      \(\Theta(n)\) running time, then partition around that number in 
      \(\Theta(n)\) running time, at last we sort the i largest numbers
      in asymptotically \(O(i\lg i)\) running time, the total running time 
      is \(O(n + i\lg i)\).
** 9-2
   1. Let i to be the weighted median, we have
      \(\sum_{k = 1}^{i - 1} \frac{1}{n} = \frac{i - 1}{n} < \frac{1}{2}\), 
      and \(\sum_{k = 1}^{i} \frac{1}{n} = \frac{i}{n} \geq \frac{1}{2}\),
      so \(i = \lceil \frac{n}{2} \rceil = median\).
   2. Use worst-case \(O(n\lg n)\) running time sorting algorithm to sort 
      the elements by weight, then accumulate weights from the left to the 
      right until the sum of weights reaches 1 / 2, the present element is 
      the weighted median.
   3. WEIGHTED-MEDIAN(A)
      #+BEGIN_SRC
      WEIGHTED-MEDIAN(A)
          return WEIGHTED-MEDIAN-RECUR(A, 1, 0.5)

      WEIGHTED-MEDIAN-RECUR(A, x, y)
          if A.length == 1
              return A[0]
          m = median index of A
          med = SELECT(A, m)
          PARTITION(A, med)
          lsum = SUM(A[1..m])
          if lsum < y
              if lsum + med >= y
                  return med
              return WEIGHTED-MEDIAN-RECUR(A[m + 1:], x - lsum - med, y - lsum - med)
          return WEIGHTED-MEDIAN-RECUR(A[:m], x, lsum)
      #+END_SRC

      ([[../codes/weighted_median.py][implementation]])
   4. Let p to be the weighted median, q to be a position other than p, compare the 
      sum of weighted distances of the two.

      - If q < p, then

        if p_i < q < p, then \(|p_i - q| - |p_i - p| = q - p\)

        if \(q \leq p_i < p\), then \(|p_i - q| - |p_i - p| = 2 p_i - p - q \geq q - p\)

        if \(q < p \leq p_i\), then \(|p_i - q| - |p_i - p| = p - q\)

        \(\sum_{i = 1}^{n} w_i d(p, p_i) - \sum_{i = 1}^{n} w_i d(q, p_i)\)

        \(\geq \sum_{p_i < p} w_i (q - p) + \sum_{p_i \geq p} w_i (p - q)\)

        \(= (p - q) (\sum_{p_i \geq p} w_i - \sum_{p_i < p} w_i) > 0\)
      - If q > p, the situation is similar as above
   5. The 2-dimensional post-office location problem of Manhattan distance is 
      equivalent to two 1-dimensional post-office location problems of 
      x-coordinates and y-coordinates, we find the weighted median x_med of 
      x-coordinates and the weighted median y_med of y-coordinates, and the 
      desired location is (x_med, y_med).
** 9-3
   1. The algorithm is described as below
      - If i >= n / 2, we select the ith element and partition around it.
      - Else we break the n elements into \(\lfloor \frac{n}{2} \rfloor\) 
        pairs, and sort the two elements in each pair.

        Then we recursively select the ith pair and partition around the 
        pair by the smaller part of the pair, the ith elements must be in 
        the i smallest pairs after the partition, we select the i smallest 
        element of the 2i elements in the pairs and return the element.
   2. \(U_i(n) = n / 2 + U_i(n / 2) + T(2i) = n + O(T(2i) \lg(n / i))\)
   3. i is a constant, then \(U_i(n) = n + O(T(2i) \lg(n / i))) = n + O(\lg n)\)
   4. if k > 2, then \(U_i(n) = n + O(T(2i) \lg(n / i))) = n + O(T(2n / k) \lg k)\)

      if k = 2, then \(U_i(n) = T(n) < n + T(n) = n + O(T(2n / k) \lg k)\)
** 9-4
   1. z_i or z_j must be chosen as pivot through \(Z_{ijk}\)

      \(Z_{ijk} = max(Z_{i..j}, Z_{i..k}, Z_{k..j})\)

      So \(E[X_{ijk}] = \frac{2}{max(j - i + 1, k - i + 1, j - k + 1)}\)
   2. \(E[X_k] = \sum_{i=1}^{n-1} \sum_{j=i+1}^{n} \frac{2}{max(j-i+1, k-i+1, j-k+1)}\)

      \(\leq 2 (\sum_{i=1}^{k} \sum_{j=k}^{n} \frac{1}{j-i+1} + \sum_{j=k+1}^{n} \frac{j-k-1}{j-k+1} + \sum_{i=1}^{k-2} \frac{k-i-1}{k-i+1})\)
   3. \(\sum_{i=1}^{k} \sum_{j=k}^{n} \frac{1}{j-i+1} = \sum_{x=0}^{n} \frac{x+1}{x+1} = n\)

      \(\sum_{j=k+1}^{n} \frac{j-k-1}{j-k+1} + \sum_{i=1}^{k-2} \frac{k-i-1}{k-i+1} \leq n\)

      So \(E[X_k] \leq 2(n + n) = 4n\)
   4. T(n) = O(n) + E[X_k] = O(n)
