* ch8-problems
** 8-1
   1. There are n! premutations, the probability is the same 1 / n!
   2. D(T)
      = \(\sum_{i\in T}D_T(i)\)

      = \(\sum_{i\in LT}D_T(i) + \sum_{i\in RT}D_T(i)\)

      = \(\sum_{i\in LT}(D_{LT}(i) + 1)\ + \sum_{i\in RT}(D_{RT}(i) + 1)\)

      = D(LT) + D(RT) + k
   3. d(k)
      = min(D(T))

      = min(D(LT) + D(RT) + k)

      = \(min_{1 \leq i \leq k - 1}\{D(LT) + D(RT) + k\}\) (We could choose 1 to k - 1 leaves for left node)

      = \(min_{1 \leq i \leq k - 1}\{min(D(LT)) + min(D(RT) + k)\}\) (The shapes of left node tree and right node tree are arbitrary)

      = \(min_{1 \leq i \leq k - 1}\{d(i) + d(k - i) + k\}\)
   4. \(f(i) = i\lg i + (k - i)\lg(k - i)\, i \in [1, k - 1]\, find min(f(i))\)

      \(f'(i) = \frac{1}{\ln 2}[i\frac{1}{i} + \ln i - (k - i)\frac{1}{k - i} - \ln(k - i)]\)

      \(= \frac{1}{\ln 2}[\ln i - \ln(k - i)]\)

      f(i) is concave when \(i \in [1, k - 1]\), the critical value is k / 2

      Then we use substitution method to prove \(d(k) = \Omega(k\lg k)\)

      - First we assume that \(d(i) \geq c i\lg i\) for some constant c when \(i \in [1, k - 1]\)

      - Base case

        \(d(1) > 1 \lg 1 = 0\)

      - Inductive step

        \(d(k) = min_{1 \leq i \leq k - 1}\{d(i) + d(k - i) + k\}\)

        \(\geq min_{1 \leq i \leq k - 1}\{c i\lg i + c (k - 1)\lg(k - i) + k\}\)

        \(= c k\lg \frac{k}{2} + k\)

        \(= c k\lg k + (1 - c)k\)

        \(\geq c k\lg k\) when \(c \leq 1\)
      - Thus \(d(k) = \Omega{k\lg k}\)
   5. T_A has n! leaves, so \(D(T_A) = \Omega(n!\lg(n!))\),
      the average-case time to sort n elements is \(\frac{D(T_A)}{n!} = \Omega(lg(n!)) = \Omega(n\lg n)\)
   6. The needed leaves is not reduced from a randomized node to its child, 
      so the randomized node could be replaced by a deterministic node with any one of its children
** 8-2
   1. couting sort
   2. insertion sort
   3. merge sort
   4. The algorithm should be stable and runs in O(n) time
   5. COUNTING-SORT-IN-PLACE(A, k)
      #+BEGIN_SRC
      COUNTING-SORT-IN-PLACE(A, k)
          let C[0..k] be a new array
          for i = 0 to k
              C[i] = 0
          for j = 1 to A.length
              C[A[j]] = C[A[j]] + 1
          for i = 1 to k
              C[i] = C[i] + C[i - 1]
          j = A.length
          while j >= 1
              p = C[A[j]]
              if j > p
                  j = j - 1
              else exchange A[j] with A[p]
                   C[A[p]] = p - 1
      #+END_SRC
      The algorithm is not stable
** 8-3
   1. First sort and group the elements by the number of digits, 
      Then do radix sort on each group. 

      Assume there is k groups, the count of elements in ith group is C_i,
      the number of digits of elements in ith group is D_i,
      The running time is T(n) = \(\Theta(\sum^{k}_{i = 1}D_i C_i) = \Theta(n)\)
   2. MSD radix sort ([[../codes/radix_sort.py][implementation]])
** 8-4
   1. Brute force
   2. Build an decision tree of the problem
      - One comparison of a red water jug and a blue water jug generates three results (>, < and =), 
        so in this decision tree a node has at most three children
      - There are n! possible results of the pairs, so the number of leaves is n!
      - The heigit of decision tree is h, which \(3^h \geq n!\), \(h = \Omega(n\lg n)\)
      - Thus the lower bound is \(\Omega(n\lg n)\)
   3. FIND-WATER-JUGS-GROUPS(R, B)
      #+BEGIN_SRC
      FIND-WATER-JUGS-GROUPS(R, B)
          if R.length == 0
              return
          r = random jug from R

          // compare all jugs in B with r
          b = jub in B same as r
          BL = jugs in B smaller than r
          BR = jugs in B larger than r

          // compare all jugs in R with b
          RL = jugs in R smaller than b
          RR = jugs in R larger than b

          output the pair of r and b
          FIND-WATER-JUGS-GROUPS(RL, BL)
          FIND-WATER-JUGS-GROUPS(RR. BR)
      #+END_SRC
      The expected number of comparisons is \(\Theta(n\lg n)\), 
      the worst-case number of comparisons is \(\Theta(n^2)\)
** 8-5
   1. 1-sorted means normal sorted
   2. {5, 1, 6, 2, 7, 8, 4, 9, 10}
   3. k-sorted means \(\sum_{j = i + 1}^{i + k}A[j] - \sum_{j = i}^{i + k - 1}A[j] = A[i + k] - A[i] \geq 0\)

      \(\Rightarrow (\forall i\in [1, n - k])[A[i] \leq A[i + k]]\)
   4. The problem is equivilant to get k * (sorting n / k size array), 
      when use O(n\lg n) sorting algorithm to sort the n / k size array, 
      the running time is \(T(n) = k\frac{n}{k}\lg \frac{n}{k} = n\lg \frac{n}{k}\)
   5. Use the solution to exercise 6.5-9, the running time is \(T(n) = O(k) + O(n\lg k) = O(n\lg k)\)
   6. \(T(n) = \Omega(n\lg(n / k)) = \Omega(n(\lg n - \lg k)) = \Omega(n\lg n)\)
** 8-6
   1. \(\binom{2 n}{n}\) possible ways
   2. The height of the decision tree is h, which \(2^h \geq \binom{2 n}{n}\)

      \(h \geq \lg \binom{2 n}{n} = 2 n - o(n)\)
   3. The two elements are consecutive means their order can't be decided by comparing to other elements, 
      and they are in different lists means their order is unknown, so they must be compared
   4. Consider the merged list of A and B is formed by (A[1], B[1], A[2], B[2]...A[n], B[n]), 
      2n - 1 comparisons is required.
** 8-7
   1. A[q] is put to the wrong location too, 
      and A[p] is smallest belong all the wrong elements, so A[p] < A[q]
   2. If every 0-1 sequence of array A is sorted by X, then array A is sorted by X

      B[p] < B[q] and p > q, so X fails to sort B
   3. The result after each step does not change if we are using compare-exchange 
      algorithm in the odd steps or not, so we can treat columnsort as an oblivious 
      compare-exchange algorithm
   4. Proofs
      - After step 1, all columns contains only one 0 -> 1 transition
      - After step 2, each column is transposed to r / s rows, only one of this rows is dirty
      - After step 3, all columns are composed to 0 -> 1 transition again, all the zeros are 
        on the top, and all the ones are on the bottom. The dirty rows come from the differences 
        between the numbers of zeros and ones of every columns. From the result of step 2, we 
        know the difference is at most s, so there are at most s dirty rows.
   5. There are at most s dirty rows in after step 3, so after step 4 the dirty area has at most 
      s^2 elements
   6. The dirty area after step 5 places in tow kinds of position: between a column or ranges from 
      a column to the next column, the first kind of dirty area is cleaned after step 5, the second 
      kind of dirty area is cleaned after steps 6-8
   7. If s does not divide r, the row generated by the cross of the original adjacent columns may 
      also be dirty, the number of rows from this situation is at most s - 1, so the total number of 
      dirty rows is at most 2s - 1, to hold these dirty rows, r must be at least \(2s(2s - 1)\)
   8. Take out some elements from the array to let the numbers of elements in the array meet the 
      requirement of division, perform columnsort, and at last put the taken elements in the right 
      place of the sorted array
   This algorithm can benefit from parallel processing ([[../codes/columnsort.c][implementation]])
