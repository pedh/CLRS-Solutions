#+TITLE: Chapter 12.1
#+PROPERTY: header-args:dot :output-dir ../static/generated/images/

* ch12.1
** 12.1-1
   #+begin_src dot :file ch12-1-1.png :exports results
   digraph G {
       node [label=1];
       h2_1; h3_1; h4_1; h5_1; h6_1;
       node [label=4];
       h2_4; h3_4; h4_4; h5_4; h6_4;
       node [label=5];
       h2_5; h3_5; h4_5; h5_5; h6_5;
       node [label=10];
       h2_10; h3_10; h4_10; h5_10; h6_10;
       node [label=16];
       h2_16; h3_16; h4_16; h5_16; h6_16;
       node [label=17];
       h2_17; h3_17; h4_17; h5_17; h6_17;
       node [label=21];
       h2_21; h3_21; h4_21; h5_21; h6_21;
       edge [dir="none"];
       subgraph cluster_h2 {
           label="height=2";
           h2_10 -> h2_4, h2_17;
           h2_4 -> h2_1, h2_5;
           h2_17 -> h2_16, h2_21;
       };
       subgraph cluster_h3 {
           label="height=3";
           h3_16 -> h3_4, h3_21;
           h3_4 -> h3_1, h3_10;
           h3_10 -> h3_5;
           h3_21 -> h3_17;
       };
       subgraph cluster_h4 {
           label="height=4";
           h4_16 -> h4_10, h4_21;
           h4_10 -> h4_5;
           h4_5 -> h4_4;
           h4_4 -> h4_1;
           h4_21 -> h4_17;
       };
       subgraph cluster_h5 {
           label="height=5";
           h5_17 -> h5_16, h5_21;
           h5_16 -> h5_10;
           h5_10 -> h5_5;
           h5_5 -> h5_4;
           h5_4 -> h5_1;
       };
       subgraph cluster_h6 {
           label="height=6";
           h6_21 -> h6_17;
           h6_17 -> h6_16;
           h6_16 -> h6_10;
           h6_10 -> h6_5;
           h6_5 -> h6_4;
           h6_4 -> h6_1;
       };
   }
   #+end_src
** 12.1-2
   If \(x\) is a node of a min-heap, then we have \(x.key \leq x.left.key\) and
   \(x.key \leq x.right.key\). If \(x\) is a node of a binary search tree, then
   we have \(x.left.key \leq x.key \leq x.right.key\). Since we cannot
   determine the sorted order of the left child and the right child of a node
   via the min-heap, we cannot print out the keys of an \(n\)-node min-heap in
   sorted order in \(O(n)\) time.
** 12.1-3
   #+begin_src
   INORDER-TREE-WALK-ITER(x)
       let S be a new stack
       PUSH(S, x)
       while not EMPTY?(S)
           cur = POP(S)
           while cur != NIL
               PUSH(S, cur)
               cur = cur.left
           if not EMPTY?(S)
               prev = POP(S)
               print prev.key
               PUSH(S, prev.right)

   INORDER-TREE-WALK-ITER-NO-STACK(x)
       cur = x
       left_done = FALSE
       while cur != NIL
           if left_done == FALSE
               while cur.left != NIL
                   cur = cur.left
               left_done = TRUE
           print cur.key
           if cur.right != NIL
              cur = cur.right
              left_done = FALSE
           else while cur.p != NIL and cur == cur.p.right
                   cur = cur.p
               cur = cur.p
   #+end_src
   [[../codes/binary_tree.py][Implementation]]
** 12.1-4
   #+begin_src
   PREORDER-TREE-WALK(x)
       while x != NIL
           print x.key
           PREORDER-TREE-WALK(x.left)
           PREORDER-TREE-WALK(x.right)

   POSTORDER-TREE-WALK(x)
       while x != NIL
           POSTORDER-TREE-WALK(x.left)
           POSTORDER-TREE-WALK(x.right)
           print x.key
   #+end_src
** 12.1-5
   Since we could get the ordered list from the binary search tree in \(O(n)\)
   running time, the comparison-based algorithm for constructing a binary search
   tree from an arbitrary list of \(n\) elements should take \(T(n)\) time in
   the worst case that
   \begin{align*}
   &T(n) + O(n) \geq \Omega(n\lg n)\\
   \implies &T(n) = \Omega(n\lg n)
   \end{align*}
